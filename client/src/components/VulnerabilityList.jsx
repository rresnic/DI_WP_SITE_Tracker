import React, { useState, useEffect } from 'react';
import {
  Box,
  Collapse,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TablePagination,
} from '@mui/material';
import Vulnerability from './Vulnerability';
import VulnerabilityCopyrightNotice from './VulnerabilityCopyrightNotice';
import axios from 'axios';
const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || "";


const VulnerabilitiesList = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [open, setOpen] = useState(true);
  const toggleSites = () => setOpen(!open);
//   const [openRows, setOpenRows] = useState({});

//   useEffect(() => {
//     fetch('/vulnerabilities-2-16-2025.json', {
//       headers: {
//         'Content-Type': 'application/json',
//         Accept: 'application/json',
//       },
//     })
//       .then((response) => response.json())
//       .then((data) => {
//         setVulnerabilities(Object.values(data));
//       })
//       .catch((error) => console.error('Error fetching data:', error));
//   }, []);
  useEffect(() => {
    const fetchVulnerabilities = async () => {
        try {
            const response = await axios.get(
                `${apiBaseUrl}/api/vulnerabilities/all`,
                { withCredentials: true }
            );
            setVulnerabilities(response.data);
        } catch (error) {
            console.log("Failed to fetch vulnerabilities", error.message || error);
        }
    }; 
    console.log("fetching  vulnerabilities");
    fetchVulnerabilities();
  }, [])

//   const handleRowClick = (id) => {
//     setOpenRows((prevOpenRows) => ({
//       ...prevOpenRows,
//       [id]: !prevOpenRows[id],
//     }));
//   };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0); // Reset to first page when rows per page changes
  };

  return (
    <Box>
        <h2 onClick={toggleSites} style={{ cursor: 'pointer' }}>
            Vulnerabilities {open ? '▲' : '▼'}
        </h2>
        <Collapse in={open}>
            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                    <TableRow>
                        <TableCell>Software Name</TableCell>
                        <TableCell>Affected Versions</TableCell>
                        <TableCell>Severity</TableCell>
                        <TableCell>Description</TableCell>
                        <TableCell>Reference URL</TableCell>
                        <TableCell>Reported Date</TableCell>
                        <TableCell>Last Updated Date</TableCell>
                        <TableCell>WF ID</TableCell>
                        <TableCell>Patch Available</TableCell>
                    </TableRow>
                    </TableHead>
                    <TableBody>
                    {vulnerabilities.slice(page * rowsPerPage, (page + 1) * rowsPerPage).map(vulnerability => {
                        return (<Vulnerability vulnerability={vulnerability} />)
                    })}
                    </TableBody>
                </Table>
            </TableContainer>
            <TablePagination
                rowsPerPageOptions={[10, 25, 50]}
                component="div"
                count={vulnerabilities.length}
                rowsPerPage={rowsPerPage}
                page={page}
                onPageChange={handleChangePage}
                onRowsPerPageChange={handleChangeRowsPerPage}
            />
            <VulnerabilityCopyrightNotice />
        </Collapse>
    </Box>
  );
};

export default VulnerabilitiesList;